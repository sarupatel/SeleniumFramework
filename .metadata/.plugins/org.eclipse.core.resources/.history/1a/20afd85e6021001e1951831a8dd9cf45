package learning;

import java.io.IOException;
import java.time.Duration;
import java.util.Arrays;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Wait;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.IRetryAnalyzer;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import com.sun.net.httpserver.Authenticator.Retry;

import io.github.bonigarcia.wdm.WebDriverManager;
import learning.testData.BaseTest;

public class ErrorMessage extends BaseTest {

	@Test(dataProvider="testData", groups="ErrorHandling")
	public void incorrectLogin(String username, String password) throws InterruptedException, IOException {
		
	
		landingPage.loginApplication(username, password);
		Assert.assertEquals("Incorrect email or password.", landingPage.incorrectLoginCredentials());
		
	}
	
	@Test(groups={"ErrorHandling"}, retryAnalyzer=learning.testData.Retry.class)
	public void incorrectProductValidation() throws InterruptedException, IOException {
		
	
		List<String> products = Arrays.asList("ZARA COAT 3");
		
		//Login Page code
		ProductCatalogue productCatalogue = landingPage.loginApplication("hpatel@gmail.com", "Keshav&jivan13");
		
		//Select Products Page
		productCatalogue.selectProducts(products);
		MyCart myCart = productCatalogue.clickOnCart();
		
		//Checkout Items Page
		List<String> selectedProducts = myCart.verifyCartItems();
		products = Arrays.asList("ZARA COAT 3");
		Boolean match = selectedProducts.equals(products);
		Assert.assertTrue(match);
	}
	
	@DataProvider
	public Object[][] testData() {
		//Object[][] data = new Object[3][2] - can be defined this way then data needs to be provided individually
		Object[][] data = {{"spatel@gmail.com","firstPassword"},{"hpatel@gmail.com","secondPassword"},{"patel@gmail.com", "thirdPassword"}};
		return data;	
	}

}
